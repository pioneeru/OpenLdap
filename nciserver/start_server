#!/bin/bash
#####################################################################################
#                                                                                   #
#  Script to start the server and wait.                                             #
#                                                                                   #
#  Usage : start_server                                                             #
#
#####################################################################################

if [ "$LICENSE" != "accept" ]; then
  echo "Set environment variable LICENSE=accept to indicate acceptance of license terms and conditions."
  echo "License agreements and information can be viewed on Passport Advantage."
  exit 1
fi


export POD_ORDINAL=${HOSTNAME##*-}
export BASE_HOSTNAME=${HOSTNAME%%-$POD_ORDINAL}
export FQDN_HOSTNAME=`hostname -f`
export PRIMARY_HOSTNAME="${BASE_HOSTNAME}-0.$(hostname -d)"
export NCI_INSTANCE="NCI_${POD_ORDINAL}"
export NCI_INSTANCE_UNDERSCORE="NCI_${POD_ORDINAL}_"

echo "FQDN_HOSTNAME=${FQDN_HOSTNAME}"
echo "POD_ORDINAL=${POD_ORDINAL}"
echo "PRIMARY_HOSTNAME=${PRIMARY_HOSTNAME}"
echo "NCI_INSTANCE=NCI_${POD_ORDINAL}"

STATUS_FILE=/share/keys/primaryStatus

if [ -z "$LDAP_SERVICE_NAME" ]; then export LDAP_SERVICE_NAME="ldapservice"; fi
if [ -z "$LDAP_BIND_DN" ]; then export LDAP_BIND_DN="cn=admin,dc=mycluster,dc=icp"; fi
if [ -z "$LDAP_BASE_DN" ]; then export LDAP_BASE_DN="dc=mycluster,dc=icp"; fi
if [ -z "$LDAP_BIND_PWD" ]; then export LDAP_BIND_PWD=admin; fi
if [ -z "$SSO_DOMAIN" ]; then export SSO_DOMAIN="mycluster.icp"; fi
if [ -z "$LTPA_KEY_FILE" ]; then export LTPA_KEY_FILE="dash_ltpa.key"; fi
if [ -z "$LTPA_KEY_PASSWORD" ]; then export LTPA_KEY_PASSWORD="netcool"; fi
if [ -z "$IMPACT_ADMIN_PASSWORD" ]; then export IMPACT_ADMIN_PASSWORD="netcool"; fi

if [ -z "$JAVA_HOME" ]; then export JAVA_HOME=${IMPACT_HOME}/wlp/lib/platform/java; fi

function verify_passwords (){
  export PATH=/opt/IBM/tivoli/impact/sdk/jre/bin/:$PATH
  /home/netcool/verifypass/verifyldappass.sh
  if [ $? -ne 0 ]
  then
    exit -1
  fi
}

start_server()
{
  echo "Starting server ..................."

  if [ ! -z $PLEASE_DEBUG_ME ]
  then
    sed -i "s/server start/server debug/" $IMPACT_HOME/bin/startImpactServer.sh
    WLP_DEBUG_ADDRESS=`expr 7777 + ${POD_ORDINAL}`
    sed -i "s/7777/$WLP_DEBUG_ADDRESS/g" /opt/IBM/tivoli/impact/wlp/bin/server
    sed -i "s/suspend=y/suspend=n/g" /opt/IBM/tivoli/impact/wlp/bin/server
  fi
  $IMPACT_HOME/bin/startImpactServer.sh $NCI_INSTANCE
}

stop_server()
{
  echo "Stopping server ..................."
  kill -s INT $PID
}


update_server_instance()
{
  # We rename the various directories to instanciate the current server
  ./update_instance.sh "${NCI_INSTANCE}" "${NCI_INSTANCE_UNDERSCORE}"

  # we do the stuff that is part of the main image...
  mv /opt/IBM/tivoli/impact/wlp/usr/servers/NCI_0 /opt/IBM/tivoli/impact/wlp/usr/servers/$NCI_INSTANCE
  mv /opt/IBM/tivoli/impact/wlp/usr/servers/$NCI_INSTANCE/apps/NCI_0.ear /opt/IBM/tivoli/impact/wlp/usr/servers/$NCI_INSTANCE/apps/$NCI_INSTANCE.ear
  sed --in-place  -- "s#NCI_0#$NCI_INSTANCE#g" /opt/IBM/tivoli/impact/wlp/usr/servers/$NCI_INSTANCE/bootstrap.properties
  sed --in-place  -- "s#NCI_0#$NCI_INSTANCE#g" /opt/IBM/tivoli/impact/wlp/usr/servers/$NCI_INSTANCE/logs/state/plugin-cfg.xml
  sed --in-place  -- "s#NCI_0#$NCI_INSTANCE#g" /opt/IBM/tivoli/impact/wlp/usr/servers/$NCI_INSTANCE/apps/$NCI_INSTANCE.ear/META-INF/application.xml
  sed --in-place  -- "s#NCI_0#$NCI_INSTANCE#g" /opt/IBM/tivoli/impact/bin/startImpactServer.sh
  sed --in-place  -- "s#NCI_0#$NCI_INSTANCE#g" /opt/IBM/tivoli/impact/bin/stopImpactServer.sh
  sed --in-place  -- "s#NCI_0#$NCI_INSTANCE#g" /opt/IBM/tivoli/impact/install/build.properties
  sed --in-place  -- "s#NCI_0#$NCI_INSTANCE#g" /opt/IBM/tivoli/impact/install/buildservername.properties
  sed --in-place  -- "s#NCI_0#$NCI_INSTANCE#g" /opt/IBM/tivoli/impact/install/buildimpact.properties

}

move_dir()
{
  if [ ! -z $1 ] && [ ! -z $IMPACT_HOME ] && [  -d  $IMPACT_HOME ]
  then
    rm -rf /space/.tmpcpy$1
    if [ ! -d /space/$1 ]
    then
      # Copy is saver than move # This method can be killed and it can run again
      echo cp -r $IMPACT_HOME/$1 /space/.tmpcpy$1
      cp -r $IMPACT_HOME/$1 /space/.tmpcpy$1
      echo mv /space/.tmpcpy$1 /space/$1
      mv /space/.tmpcpy$1 /space/$1
    fi
    rm -rf $IMPACT_HOME/$1
    ln -s /space/$1 $IMPACT_HOME/$1
  fi
}

prepare_data()
{
    if [ 0 -ne $POD_ORDINAL ] ; then
      update_server_instance
    fi
    move_dir db
    move_dir dsa
    move_dir dsalib
    move_dir etc
    move_dir integrations
    move_dir jslib
    move_dir platform
    move_dir policy
    if [ -s /space/impactserver.log4j.properties-replace ] ; then
        echo "Replacing $IMPACT_HOME/etc/impactserver.log4j.properties..."
        cat /space/impactserver.log4j.properties-replace
        cat /space/impactserver.log4j.properties-replace > $IMPACT_HOME/etc/impactserver.log4j.properties
    fi
    touch /opt/IBM/tivoli/impact/wlp/usr/servers/$NCI_INSTANCE/logs/messages.log
}

update_server()
{
    #Remove entry for key.jks and  trust.jks
    $IMPACT_HOME/sdk/jre/bin/keytool -delete -keystore $IMPACT_HOME/wlp/usr/servers/$NCI_INSTANCE/resources/security/key.jks -alias default -storepass netcool

    $IMPACT_HOME/sdk/jre/bin/keytool -delete -keystore $IMPACT_HOME/wlp/usr/servers/$NCI_INSTANCE/resources/security/trust.jks -alias mykey -storepass netcool

    #Generate new key pairs for key.jks

    $IMPACT_HOME/sdk/jre/bin/keytool -genkeypair -keystore $IMPACT_HOME/wlp/usr/servers/$NCI_INSTANCE/resources/security/key.jks -dname CN=$HOSTNAME,O=IBM,OU=$NCI_INSTANCE,C=US  -keypass netcool -storepass netcool -keyalg RSA -keysize 2048 -validity 3650 -alias default

    #Generate new key pairs for trust.jks. (Repeat this for both servers).

    $IMPACT_HOME/sdk/jre/bin/keytool -genkeypair -keystore $IMPACT_HOME/wlp/usr/servers/$NCI_INSTANCE/resources/security/trust.jks -dname CN=$HOSTNAME,O=IBM,OU=$NCI_INSTANCE,C=US -keypass netcool -storepass netcool -keyalg RSA -keysize 2048 -validity 3650 -alias mykey


    #Export certificate from keystore. (Repeat this for both servers).

    $IMPACT_HOME/sdk/jre/bin/keytool -export -alias default -keystore $IMPACT_HOME/wlp/usr/servers/$NCI_INSTANCE/resources/security/key.jks -file /home/netcool/impact.crt -storepass netcool

    #Delete the default certificate from the truststore. (Repeat this for both servers).

    $IMPACT_HOME/sdk/jre/bin/keytool -delete -alias default -keystore $IMPACT_HOME/wlp/usr/servers/$NCI_INSTANCE/resources/security/trust.jks -storepass netcool

    #Import certificate into trust store. (Repeat this for both servers).

    $IMPACT_HOME/sdk/jre/bin/keytool -import -alias default -keystore $IMPACT_HOME/wlp/usr/servers/$NCI_INSTANCE/resources/security/trust.jks -file /home/netcool/impact.crt -storepass netcool -noprompt

}
configure_ldap()
{
 # We dont want to see failures
  sed -i "s/LDAPHost=.*/LDAPHost=$LDAP_SERVICE_NAME/g" $IMPACT_HOME/install/security/impactdap.properties
  sed -i "s/LDAPPort=.*/LDAPPort=$LDAP_SERVICE_PORT/g" $IMPACT_HOME/install/security/impactdap.properties
  sed -i "s/LDAPBindDN=.*/LDAPBindDN=$LDAP_BIND_DN/g" $IMPACT_HOME/install/security/impactdap.properties
  sed -i "s/LDAPBaseEntry=.*/LDAPBaseEntry=$LDAP_BASE_DN/g" $IMPACT_HOME/install/security/impactdap.properties
  sed -i "s/LDAPBindPass=.*/LDAPBindPass=$LDAP_BIND_PWD/g" $IMPACT_HOME/install/security/impactdap.properties
  $IMPACT_HOME/install/security/ICP_confAuth4LDAP.sh enable impactadmin $IMPACT_ADMIN_PASSWORD netcool true
  $IMPACT_HOME/install/security/mapRoles.sh -add -group icpadmins -roles "impactAdminUser|impactOSLCDataProviderUser"
  $IMPACT_HOME/install/security/mapRoles.sh -add -group icpusers -roles "impactAdminUser|impactOSLCDataProviderUser"
  $IMPACT_HOME/install/security/mapRoles.sh -add -group NOI-Admins -roles "impactAdminUser|impactOSLCDataProviderUser"
}
import_ltpa_keys()
{
  cp /share/keys/$LTPA_KEY_FILE $IMPACT_HOME/wlp/usr/servers/$NCI_INSTANCE/resources/security/ltpa.keys
  echo "Importing LTPA keys from DASH into Impact for SSO"
  $IMPACT_HOME/install/security/configImpactSSO.sh "defaultWIMFileBasedRealm" LtpaToken2 $SSO_DOMAIN $LTPA_KEY_PASSWORD netcool
}
wait_for_dash_ltpa_keys()
{
  echo "Waiting for DASH LTPA keys"
  while [ ! -f /share/keys/$LTPA_KEY_FILE ] ; do
    sleep 2
    echo -n "."
  done
}
update_properties()
{
  src=$1
  dst=$2
  if [[ -s $src ]] ; then
    echo "Update $dst using $src..."
    cat $src
    while IFS= read -r line; do
      # Ignore comments
      if [[ "$line" =~ ^#+ ]]; then
        continue
      # Does the line look like k=v?
      elif [[ "$line" =~ (.*)=(.*) ]]; then
        k=${BASH_REMATCH[1]}
        v=${BASH_REMATCH[2]}

        # Does the key exist in the properties file?
        grep --quiet "^$k=" $dst
        if [[ $? -eq 0 ]]; then
          # Replace value
          sed --in-place "s/^$k=.*/$k=$v/g" $dst
        else
          # Append key=value
          echo "$k=$v" >> $dst
        fi
      fi
    done < $src
  fi
}
replace_jvm_options()
{
  if [[ -s /space/jvm.options-replace ]] ; then
    echo "Replacing jvm.options with..."
    cat /space/jvm.options-replace
    cp /space/jvm.options-replace $IMPACT_HOME/wlp/usr/servers/$NCI_INSTANCE/jvm.options
  fi
}
update_derby_db()
{
  if [ -s /space/derby-extensions.sql ] ; then
    echo "Applying /space/derby-extensions.sql to derby db..."
    echo $(date +"%FT%T") "Wait for derby to be ready..."
    DERBY_READY=1
    for i in `seq 1 24`;
    do
      echo "connect 'jdbc:derby://$(hostname -i):1527/ImpactDB;user=impact;password=derbypass';SET SCHEMA NOI" | $IMPACT_HOME/bin/nci_db connect | grep -q "0 rows inserted"
      DERBY_READY=$?
      if [ $DERBY_READY == 0 ] ; then
        echo $(date +"%FT%T") "derby is ready"
        break
      else
        echo $(date +"%FT%T") "derby is not ready"
      fi
      sleep 5
    done

    if [ "$DERBY_READY" == "0" ] ; then
      echo "connect 'jdbc:derby://$(hostname -i):1527/ImpactDB;user=impact;password=derbypass';" > /space/derby-extensions-update.sql
      cat /space/derby-extensions.sql >> /space/derby-extensions-update.sql
      echo "Applying /space/derby-extensions.sql to derby db..."
      cat /space/derby-extensions.sql
      $IMPACT_HOME/bin/nci_db connect -sqlfile /space/derby-extensions-update.sql
    else
      echo $(date +"%FT%T") "derby was not ready in time - giving up applying /space/derby-extensions.sql"
    fi
  fi
}

trap "stop_server" TERM INT EXIT

echo "Preparing image for startup..."
prepare_data

echo "Creating certificate...."
update_server

echo "Post-install hostname changes..."
/home/netcool/postinstall.sh "${NCI_INSTANCE}" "${BASE_HOSTNAME}-0.$(hostname -d)" "${BASE_HOSTNAME}-1.$(hostname -d)"

echo "Dump the file $IMPACT_HOME/etc/nameserver.props before adding more servers..."
cat $IMPACT_HOME/etc/nameserver.props


echo "Setting up the name servers"
LAST_SERVER=$(expr $NCISERVERS_REPLICA_COUNT - 1)
echo "LAST_SERVER=$LAST_SERVER"
if [ $LAST_SERVER -gt 0 ]; then
    for i in $( eval echo {0..$LAST_SERVER} )
    do
      if [ "${BASE_HOSTNAME}-$i" != "$(hostname -s)" ]; then
          /opt/IBM/tivoli/impact/install/nameserver/setNameServer.sh -add ${BASE_HOSTNAME}-$i.$(hostname -d),${IMPACT_NAMESERVER_PORT}
      fi
    done
fi

# Configure preferred primary of backup
if [ 0 -eq $POD_ORDINAL ] ; then
  echo "Updating $IMPACT_HOME/etc/${NCI_INSTANCE}_server.props for the primary."
  echo "impact.server.preferredprimary=true" >> $IMPACT_HOME/etc/${NCI_INSTANCE}_server.props
fi
if [ 1 -eq $POD_ORDINAL ] ; then
  echo "Updating $IMPACT_HOME/etc/${NCI_INSTANCE}_server.props for the secondary."
  echo "impact.server.secondary.preferredprimary=true" >> $IMPACT_HOME/etc/${NCI_INSTANCE}_server.props
fi

echo "Dump the file $IMPACT_HOME/etc/nameserver.props after adding more servers"
cat $IMPACT_HOME/etc/nameserver.props

verify_passwords
echo "Update properties files..."
update_properties /space/NCI_server.props-update $IMPACT_HOME/etc/${NCI_INSTANCE}_server.props
update_properties /space/impactserver.log4j.properties-update $IMPACT_HOME/etc/impactserver.log4j.properties
replace_jvm_options

echo "Configuring LDAP Authentication..."
configure_ldap

echo "Check the new server config file: ${IMPACT_HOME}/wlp/usr/servers/${NCI_INSTANCE}/server.xml"
cat ${IMPACT_HOME}/wlp/usr/servers/${NCI_INSTANCE}/server.xml

echo "Configuring SSO ..."
wait_for_dash_ltpa_keys
import_ltpa_keys

echo "Dump the file $IMPACT_HOME/etc/nameserver.props after configuring LDAP"
cat $IMPACT_HOME/etc/nameserver.props

PID=$(ps -C java -o pid= | tr -d " ")
if [ -z "$PID" ]
then
  echo "Starting the server manually:"
  start_server || exit $?
else
  echo "Impact server is already starting..."
fi

PID=$(ps -C java -o pid= | tr -d " ")
echo "Post start SSO and LDAP configurations"
$IMPACT_HOME/install/security/postStartLDAPSSO.sh LtpaToken2 impactadmin $IMPACT_ADMIN_PASSWORD

# Report we are up and running so backup can start
echo "Impact Primary Server is up" > $STATUS_FILE
chmod a+r $STATUS_FILE

# Apply any custom sql to derby db
update_derby_db

PID=$(ps -C java -o pid= | tr -d " ")
touch $IMPACT_HOME/logs/impactserver.log
touch  $IMPACT_HOME/logs/impactserver-errors.log
tail -F $IMPACT_HOME/logs/impactserver.log --pid $PID -n +0 &
tail -F $IMPACT_HOME/logs/impactserver-errors.log --pid $PID -n +0 >&2 &
tail -F $IMPACT_HOME/db/NCI_${POD_ORDINAL}/derby/derby.log --pid $PID -n +0 >&2 &

while [ -e "/proc/$PID" ]; do
   sleep 5
done
echo "=========================================================="
echo "Dump of $IMPACT_HOME/db/NCI_${POD_ORDINAL}/derby/derby.log"
cat $IMPACT_HOME/db/NCI_${POD_ORDINAL}/derby/derby.log
echo "=========================================================="